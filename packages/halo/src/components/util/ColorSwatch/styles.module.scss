@import 'halo';

.component {
  @include halo-element-base; // TODO: deprecate
  @include border-rounded(2px);
  @include flex-column($fill: true);
  align-items: stretch;
  padding: tempo(1);
  height: 150px;
  overflow: hidden;
  text-align: center;
  flex-grow: 1;
  cursor: pointer;
  border-radius: 2px;
  border: 1px solid transparent;

  & + & {
    margin-left: tempo(1);
  }

  &:first-of-type {
    margin-left: 0;
  }

  &:focus {
    outline: 0;
    border: 1px solid rgba($blue-400, 0.5);
  }

  .color {
    @include border-rounded;
    height: 80px;
    margin-bottom: tempo(1);
    content: ' ';
    cursor: pointer;
  }

  .hex {
    display: block;
    font-weight: 600;
    font-size: 12px;
    white-space: nowrap;
    word-break: keep-all;
    margin-bottom: tempo(0.5);
    padding: 2px;
    border-radius: 2px;
    cursor: copy;

    &:hover {
      background-color: $slate-200;
    }
  }

  .variableName {
    @include font(
      $color: slate-600,
      $size: 11px,
      $family: monospace,
      $antialiased: true
    );
    cursor: copy;
    white-space: nowrap;
    word-break: keep-all;

    &:hover {
      background-color: $slate-200;
    }
  }

  &.backgroundBlack {
    color: $text-light-aaa;
    background-color: $slate-900;
    @include font-antialiased;
  }

  &.backgroundWhite {
    color: $text-dark-aaa;
  }
}

@each $name, $color in $colors {
  :global(.halo-colorswatch-#{'' + $name}) {
    .color {
      position: relative;
      background-color: $color;

      // Clever Boiâ„¢ way to print the hex color value as content
      &::before {
        position: absolute;
        top: calc(60% - 20px);
        left: 50%;
        transform: translateX(-50%);
        display: inline-block;
        padding: 0 tempo(1);
        text-align: center;
        line-height: 20px;
        color: darken($color, 70%);
        content: ' ';
        pointer-events: none;
        @include border-rounded;
        @include font-antialiased;
        @include font(
          $size: 11px,
          $family: monospace,
          $antialiased: true,
          $spacing: 0.05em
        );
      }
    }
  }
}
