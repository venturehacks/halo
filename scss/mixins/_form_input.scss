@import './space';

$raw-input-height: 50px !default;
$raw-input-height--transparent: 48px !default;
$raw-checkbox-size: tempo(2.5) !default;
$raw-radio-size: tempo(2.5) !default;

// toggle switch
$raw-toggle-switch-gutter-width: tempo(4.5) !default;
$raw-toggle-switch-gutter-height: 12px !default;
$raw-toggle-switch-knob-size: tempo(2.5) !default;

// Misc

@mixin input-placeholder($size: md) {
  @include font($size: $size, $color: $text-dark--a);
}

@mixin input--disabled {
  @include font($color: $text-dark--a);
  background-color: $slate--200;
  border-color: $slate--300;
}

// accessible way of hiding the default input
// https://webaim.org/techniques/css/invisiblecontent/

@mixin hide-default-browser-input {
  opacity: 0;
  position: absolute;
  -webkit-appearance: none;
  z-index: -2;
}

// Text inputs

@mixin input($size: md, $style: normal) {
  @include font($size: $size, $color: $slate--900);
  max-width: 100%;
  padding: tempo(1.5) tempo(2);

  @if $style == normal {
    @include input-border--slate;
    border-width: 1px;
    border-style: solid;
    background-color: white;
  } @else if $style == transparent {
    @include input-border--transparent;
    background-color: transparent;
  }

  &::placeholder {
    @include input-placeholder($size: $size);
  }

  &:hover {
    @if $style == normal {
      @include input-border--hover;
    }
  }

  &:focus {
    @if $style == normal {
      @include input-border--hover;
      @include input-border--focused;
    }
  }

  &[disabled] {
    @include input--disabled;
  }

  &:-webkit-autofill {
    box-shadow: 0 0 0 50px white inset;
    -webkit-text-fill-color: #333;
  }

  &:-internal-autofill-selected {
    box-shadow: 0 0 0 50px white inset;
  }

  &.widthAuto {
    width: auto;
  }

  &.width100 {
    width: 100%;
  }

  &.hasError {
    &.warning {
      @include input-border--warning;
    }

    &.critical {
      @include input-border--error;
    }
  }
}

// Radio + Checkbox

// alias for input-checkbox
@mixin input-radio($args...) {
  @include input-checkbox($args...);
}

@mixin input-checkbox {
  @include hide-default-browser-input;

  &[disabled] {
    pointer-events: none;
  }
}

// Borders

@mixin input-border--focused {
  box-shadow: 0 0 0 4px $blue--200;
  outline: none;
}

@mixin input-border--hover {
  @include border-rounded;
  border: 1px solid $blue--500;
}

// for checkboxes and radios
@mixin input-border--hover--thick {
  border: 2px solid $blue--500;
}

@mixin input-border--warning {
  @include border-rounded;
  border: 1px solid $text-dark--warning;
}

@mixin input-border--error {
  @include border-rounded;
  border: 1px solid $text-dark--error;
}

@mixin input-border--slate {
  @include border-rounded;
  border: 1px solid $slate--400;
}

@mixin input-border--transparent {
  border: none;
  box-shadow: none;
  outline: none;
}

// Labels

%input-label--base {
  @include font($size: md);
  position: relative;
  display: inline-block;
  cursor: pointer;
  transition: all 200ms ease;

  &::before,
  &::after {
    transition: all 200ms ease;
    position: absolute;
    display: inline-block;
    content: '';
  }

  [disabled] + &,
  [disabled]:checked + & {
    opacity: 0.5;
    cursor: default;
    pointer-events: none;
  }
}

@mixin input-label--checkbox {
  @extend %input-label--base;
  padding-left: tempo(3.5);
  line-height: $raw-checkbox-size;

  // empty checkbox
  &::before {
    left: 0;
    height: $raw-checkbox-size;
    width: $raw-checkbox-size;
    @include input-border--slate;
    background-color: $white;
  }

  // checkmark
  &::after {
    left: 6px;
    top: 7px;
    height: 5px;
    width: 9px;
    border-left: 2px solid $blue--500;
    border-bottom: 2px solid $blue--500;
    transform: rotate(-45deg);
  }

  // hover || checked = thick border
  &:hover::before,
  :checked + &::before {
    @include input-border--hover--thick;
  }

  // checked
  :checked + &::after {
    content: ' ';
  }

  // unchecked
  :not(:checked) + &::after {
    content: none;
  }

  [disabled] + &,
  [disabled]:checked + & {
    &::before,
    &::after {
      @include input--disabled;
    }
  }

  // warning color
  .hasError.warning + & {
    &::before,
    &::after {
      border-color: $text-dark--warning;
    }
  }

  // critical color
  .hasError.critical + & {
    &::before,
    &::after {
      border-color: $text-dark--warning;
    }
  }
}

@mixin input-label--toggle-switch {
  @extend %input-label--base;
  padding-left: tempo(6);
  padding-right: tempo(1);
  line-height: $raw-toggle-switch-gutter-height - 1px;
  display: block;

  // switch gutter
  &::before {
    left: 0;
    top: 4px;
    border-radius: 7px;
    height: $raw-toggle-switch-gutter-height;
    width: $raw-toggle-switch-gutter-width;
    background-color: currentColor;
  }

  // toggle circle nub
  &::after {
    left: 0;
    top: 0;
    width: $raw-toggle-switch-knob-size;
    height: $raw-toggle-switch-knob-size;
    background-color: $white;
    @include border-circle;
    border: 2px solid currentColor;
  }

  // off (unchecked)
  :not(:checked) + & {
    &::before,
    &::after {
      color: $slate--500;
    }
  }

  // on (checked)
  :checked + & {
    &::before,
    &::after {
      color: $blue--500;
    }

    // move knob rightward to indicate 'on' state
    &::after {
      left: $raw-toggle-switch-knob-size - 4px;
    }
  }

  [disabled]:checked + & {
    &::before,
    &::after {
      color: $blue--500;
    }
  }

  .hasError.warning + & {
    &::before,
    &::after {
      color: $text-dark--warning;
    }
  }

  .hasError.critical + &,
  .hasError.critical:checked + & {
    &::before,
    &::after {
      color: $text-dark--error;
    }
  }
}

@mixin input-label--toggle-switch--right {
  @include input-label--toggle-switch;
  padding-right: tempo(6);
  padding-left: 0;
  text-align: right;

  // switch gutter
  &::before {
    right: 0;
    left: auto;
  }

  // toggle circle nub
  &::after {
    right: tempo(2);
    left: auto;
  }

  // on (checked)
  :checked + & {
    // move knob leftward to indicate 'on' state
    &::after {
      right: 0;
      left: auto;
    }
  }
}

@mixin input-label--radio {
  @extend %input-label--base;
  line-height: $raw-radio-size;
  padding-left: tempo(3.5);

  // empty radio
  &::before {
    left: 0;
    height: $raw-radio-size;
    width: $raw-radio-size;
    @include border-circle;
    border: 1px solid $slate--400;
    background-color: $white;
  }

  // selected radio
  &::after {
    left: 7px;
    top: 7px;
    background-color: $blue--500;
    width: 6px;
    height: 6px;
    @include border-circle;
  }

  // hover || checked = thick border
  &:hover::before,
  :checked + &::before {
    @include input-border--hover--thick;
  }

  // checked
  :checked + &::after {
    content: ' ';
  }

  // unchecked
  :not(:checked) + &::after {
    content: none;
  }

  [disabled] + &,
  [disabled]:checked + & {
    &::before,
    &::after {
      @include input--disabled;
    }
  }

  // warning color
  .hasError.warning + & {
    &::before,
    &::after {
      border-color: $text-dark--warning;
    }
  }

  // critical color
  .hasError.critical + & {
    &::before,
    &::after {
      border-color: $text-dark--warning;
    }
  }
}
